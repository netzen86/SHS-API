proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=cache:10m inactive=60m;
upstream hosts {
	server ${shs_address_0};
	server ${shs_address_1};
}

lua_package_path "/usr/local/openresty/module/lib/resty/upstream/?.lua;;";

lua_shared_dict healthcheck 1m;
lua_socket_log_errors off;

init_worker_by_lua_block {
    local hc = require "resty.upstream.healthcheck"
	
    local ok, err = hc.spawn_checker{
        shm = "healthcheck",
        upstream = "hosts",
        type = "http",
        http_req = "GET /status HTTP/1.0\r\nHost: hosts\r\n\r\n",
        port = nil,
        interval = 2000,
        timeout = 1000,
        fall = 3,
        rise = 2,
        valid_statuses = {200, 302},
        concurrency = 10,
    }
    if not ok then
        ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
        return
    end
}

server {
	listen 80;
    server_name shs.netzen.dev;

	location /long_dummy {
		access_log off;
		proxy_pass http://hosts;
		proxy_cache cache;
		proxy_cache_valid any 10m;
		add_header X-Proxy-Cache $upstream_cache_status;
	}
	location / {
		access_log off;
		proxy_pass http://hosts;
	}

	location /hck_status {
		access_log off;
		default_type text/plain;
        content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
        }
	}

	location /nginx-status {
    	stub_status on;
	}

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/shs.netzen.dev/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/shs.netzen.dev/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}